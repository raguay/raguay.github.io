{"pages":[{"title":"","text":"{\"version\":\"https://jsonfeed.org/version/1\",\"title\":\"Custom Computer Tools Microblog\",\"home_page_url\":\"https://customct.com/\",\"feed_url\":\"https://customct.com/feed.json\",\"description\":\"The microblog feed for customct.com. I talk about computer automation, and freelance programming.\",\"icon\":\"http://customct.com/images/avitar.jpg\",\"favicon\":\"http://customct.com/favicon.ico\",\"author\":{\"name\":\"Richard Guay\",\"url\":\"http://customct.com\",\"avatar\":\"http://customct.com/images/avitar.jpg\"},\"items\":[{\"id\":\"11\",\"content_html\":\"Just moved my site to using Hexo and GitHub. Check it out!\",\"url\":\"http://customct.com\",\"date_published\":\"2018-12-05T11:55:00\"},{\"id\":\"10\",\"content_html\":\"I’ve heavily updated my fman plugin for working with Dropbox. You can now browse and download stuff from Dropbox server to your local file system. It’s running faster than most other solutions! Check it out: https://github.com/raguay/DropboxConnect\",\"url\":\"http://customct.com\",\"date_published\":\"2018-02-02T11:55:00\"},{\"id\":\"9\",\"content_html\":\"I’m really enjoying using TextBar. I’ve moved most of my BitBar scripts to it. Looking forward to playing with the HTML output!\",\"url\":\"http://customct.com\",\"date_published\":\"2018-02-02T11:55:00\"},{\"id\":\"8\",\"content_html\":\"@manton I'm seeing about 5 to 10 minute delay in posting.\",\"url\":\"http://customct.com\",\"date_published\":\"2017-11-17T23:31:00\"},{\"id\":\"7\",\"content_html\":\"@manton It still takes a while to show up on the stream. When I post to the ping address, my server is queried right away, but I don't see it in the feed for a while.\",\"url\":\"http://customct.com\",\"date_published\":\"2017-11-17T22:38:00\"},{\"id\":\"6\",\"content_html\":\"@manton I just figured that out. Right now I'm hand compiling the feed stream. Now that I've figured out the basics, I'm adding more funcitonality to create the stream. Thanks for the help.\",\"url\":\"http://customct.com\",\"date_published\":\"2017-11-17T22:21:00\"},{\"id\":\"5\",\"content_html\":\"@manton I built my own web server using golang. I'm trying to add microblogging to it. I'm trying to figure out the process. So, if the server pings 'http://micro.blog/raguay', it will update my feed?\",\"url\":\"http://customct.com\",\"date_published\":\"2017-11-17T22:05:00\"},{\"id\":\"4\",\"content_text\":\"Okay. It seems to work now. I had to change the feed type to json. How do you get it to update quicker?\",\"url\":\"http://customct.com\",\"date_published\":\"2017-11-17T20:50:00\"},{\"id\":\"3\",\"content_text\":\"@manton How do I see my posts from my server? Should they show up in the Micro.blog main feed? I can't tell it they are posted at all.\",\"url\":\"http://customct.com\",\"date_published\":\"2017-11-17T13:52:00\"},{\"id\":\"2\",\"content_text\":\"Check out my website.\",\"url\":\"http://customct.com\",\"date_published\":\"2017-11-17T13:00:00\"},{\"id\":\"1\",\"content_html\":\"Testing my microblog feed.\",\"date_published\":\"2017-11-17T13:00:00\"}]}","link":"/feed.json"},{"title":"LaunchBar Actions","text":"LaunchBar 6 is an application similar to Alfred. Since I love making scripts and extensions, I naturally started making some for LaunchBar as well. I also had many requests for porting some of my Alfred workflows to LaunchBar. Therefore, this is the results. If you have a particular need, let me know. You can find all of these actions on my GitHub account. Evaluate JavaScriptThis handy action is a good way to test JavaScript; especially, LaunchBar specific JavaScript. Once you have this action installed, simply highlight some JavaScript code, press and hold the key sequence for your LaunchBar. When LaunchBar shows up with the text, send the text to the action. For example, highlight and run this snippet: 12345LaunchBar.displayInLargeType({ title: 'Don’t you just hate this font?', string: 'You should.', font: 'Comic Sans MS'}); When you send it to this action, a large type display in Comic Sans will ask you if you hate this font. To Buddhist YearThis action will convert the current date to the Buddhist calendar and display it in a notification. If a date string is passed, it will convert it to the Buddhist calendar and display it in a notification. The Buddhist date is also copied to the clipboard for easy insertion into a document. List Processor and List Processor - OptionsThese two actions work together. The List Processor - Options allows you to set the different options for the action. The separator is a character that you want to use to separate the list into different parts. The position is the location in the list for the next retrieval. The forward options tells if the next call will progress forwards in the list or backwards. By quick sending (cmd-space held until the selection is copied into LaunchBar. Then press tab.) to the List Processor action, you can set the string to be processed. Then just run the List Processor action without a string gets the next item in the list. This is very handy for sequencing through a list of items. Add To TaskPaper ProjectsThis action is used to add a new task to a TaskPaper project. If you send a path of a TaskPaper file to this action, it stores that path to add tasks to. Otherwise, if TaskPaper is running while you run this action, it will get that files path, store it, and use that file. Once it has determined what file to use, it asks the user for the task line and which project to add it to. The user simply types the name of the task, and selects the project. That new task will be added to the top of that project. Paste Through TextExpanderThis action accepts a string. That string is past to TextExpander for pasting into the top most application and expanding it’s specific macros. This action is used by the Quiver Snippets action to paste the snippets through TextExpander. Quiver SnippetsThis action allows you to create and manage snippets in the Quiver application. When you load the action, send either your Quiver Library file or a shared Snippets notebook file to the action. That will configure the action and give you the option of loaded the Default note and the sample snippets. It also allows you to load the help files in to Quiver. Please refer to the help file for more information. Quick Load and Quick Load OptionsThis action finds the most recently modified/created file in the Downloads directory and loads it into LaunchBar. You can the action it with any program you want. If you want a different directory, simply change the name of the directory in the user’s home directory in the variable “searchDir”. The Quick Load Options allow you to change the directory being searched by sending a new directory to this action. By running the action (Abbreviation is set to ‘lop’), you can set the sort type (by last modified or by last added to the directory) and the order number (Most recent, second most recent, etc.). If you set it to the 5th most recent, but there are only two items, it will correctly get the last item. The Quick Load action uses the users Download directory, first most recent file, and sort by last modified as the defaults. DockShelf.appDockShelf is a great dock replacement program for Mac OS X. The following actions are for this program: DockShelfWorkspaces.lbaction This action has an abbreviation set to dsws to show a list of workspaces defined. When you select one, DockShelf will switch to that workspace. FoldingText.appFoldingText is a great markdown editor. It is easily extendable with scripts and extensions. Here, I have the LaunchBar scripts that I use with FoldingText. FoldingText.lbaction This is a collection of quick scripts for performing different actions. You type the keyword ft-action that will list all the possible actions. As you type a title, the list will shorten to the one you want. The possible actions are: FoldingText Documents - a list of available documents about FoldingText. Open Selection - Will take the currently selected file in either Finder or PathFinder and open it in FoldingText. Get Visible Text - All non-folded text will be copied to the clipboard. Chrome Tabs - A link to each tab in the topmost Chrome browser will be listed in the topmost FoldingText document at the current location. Safari Tabs - A link to each tab in the topmost Safari browser will be listed in the topmost FoldingText document at the current location. Remove Tags - Will give a list of the tags in the topmost FoldingText document and remove the tags you select. Marked - Opens the topmost FoldingText document in Marked 2.app. Next - This will find the first @next tag in the document, change it to done with the current date and time, and move the @next tag to the next item. FoldingTextAddToTag.lbaction This action is triggered with ft-addtotag. When triggered, you can type anything and have that added to the tag you select from a list of tags obtained from the topmost document. Therefore, if you topmost document has a @inbox tag, it will list it for you to add a new item. FoldingTextBookMarks.lbaction This action is triggered by ft-bookmark. It will prompt you with a list of actions: go to bookmark, make bookmark, remove bookmard, or install bookmark activator. The make-bookmark requires you to add a text to set as the title for the bookmark. Therefore, type mark|This is my title will get the current location in the topmost FoldingText document and remember it with the title This is my title. The | tells the script that the next item is the title. The make-bookmark also lease the URI in the clipboard. The get-bookmark-UIR will simple get the URI for the current location in the current FoldingText document and place it in the clipboard. You can then paste it in to another application or document. Great for making jump to lists. In order to go to a bookmark, the bookmark activator has to be ran at least once on your system. This will add a special URI handler for FoldingText bookmarks. FoldingTextGoToTag.lbaction This action is triggered with ft-gototag. It will show a list of tags from the topmost document. You select the one you want focused. FoldingTextInbox.lbaction This action is triggered with ft-inbox. It allows you to type any text and have it appended to the bottom of that tag. Therefore, if you have a todo list with a tag of @inbox, you can type - I need to do this and it will be added to the todo list properly. Tutorials Creating LaunchBar 6 Actions","link":"/LaunchBar/index.html"},{"title":"About","text":"About UsCustom Computer Tools is a website owned and ran by Richard Guay, missionary in Thailand. Before I trusted in the Lord Jesus Christ to save me from my sins, I was an Electrical Engineer and Programmer by trade. You can read my testimony of salvation and my resume. I still love to program and have kept up with the times somewhat. Since then, the hard economic times and various reasons, our support is no longer sufficient for all of our medical and educational needs. Since I have a skill, I felt led of God to do as Paul did in supplying his needs through his skills to help when others are not able (Acts 20:34 “Yea, ye yourselves know, that these hands have ministered unto my necessities, and to them that were with me.”). The result is this website. All the computer tools found here I have found useful in the construction and maintenance of several websites. I hope you too find them useful. Tutorials Written on Other SitesI also write tutorials for Computer Tuts+. I try to mention the articles in the areas that I already have similar topics on this site (ie. Alfred articles are listed on my Alfred Workflows page). Here are articles that do not go along with other themes: Take Control With ControlPlane How to Order Thoughts From Chaos to Masterpiece Getting Spiffy With Powerline Perfect Configurations with Homebrew and Cask Vim for Beginners Beginners Guide to Console Start Developing with go on the Mac Basic Vim Configuration Save Time by Automating the Mac How to Create a Slideshow Presentation From Markdown Notes","link":"/about/index.html"},{"title":"Alfred Workflows","text":"Alfred is a great companion working on the Mac. It helps me in all of my chores and tasks. I currently average 180+ usages a day with Alfred with my top level of useage at 768 times in one day! Much of that is due to the workflows I have made to help me do my work. Remember, you have to have the right tool for the right job. On this page, I would like to share with you some of my tools. Maybe they will help your jobs go more smoothly! You can download each of these workflows from my GitHub Account. The GitHub account has a directory for Alfred 2 and Alfred 3. Use the directory that matches your version of Alfred. I’m not adding new feature to the Alfred 2 workflows, but all of them have a match in the Alfred 3 directory. I highly recommend using Alfred 3. Workflows Alfred Bible Alfred Browser Toolbox Alfred Editor Alfred Time Keeper Alfred URI Handler AnyBar Workflow Budget Workflow Compress Image Copy/Move To DockShelf Workflow Dropzone 3 Workflow DwellClick Workflow ExpanDrive Toolkit Fish Toolbox Folding Text Workflow Hammerspoon Workflow Haskell Text Converter Workflow Instant Search MacVim Toolbox Markdown to Presentation Workflow Name Sequencer Next Item Notes Workflow NW.js Toolbox (formerly Node Webkit Toolbox) OctoPOW Open in Alfred Peppermint Toolbox Picate Workflow Powerline Toolbox Quiver Workflow Run Chrome with Accessibility s3cmd Toolkit Scratch Pad Sermon Scheduler Slap Toolbox Template Workflow Text Case Converter in Swift Text Massagers TextSoap Cleaners Textwell Workflow Thai Translation Workflow Time Adding Workflow Time Stamp Workflow Title Case Server Todo Workflow Video Time Zip Info Alfred LibrariesgoAlfred I created a library in the go language from Google to make it easier to create your Alfred workflow. You can see the library here: goAlfred Alfred Swift Library This is a library to create workflows for Alfred in Swift. It has an example program for converting text cases used in the Text Case Converter workflow. Alfred ArticlesI have also written a series of articles on using Alfred for Mac Tuts+. They are: Alfred Workflows for Beginners Alfred Workflows for Intermediates Alfred Workflows for Advanced Alfred Debugging Track Project Time With Alfred Timekeeper Use a Mac to Monitor Website Uptime or Other Regular Tasks Alfred Workflows in Swift Creating Alfred Workflows in Haskell Alfred 3 Explained - Part 1 Alfred 3 Explained - Part 2 A Beginners Guide to JavaScript Application Scripting","link":"/alfred/index.html"},{"title":"Time Adding Workflow","text":"I am often needing to add up a series to times in a document. This workflow makes it very easy. Clear the accumulator, select a time value, and hit your hotkey combination you assigned in this workflow. The time will be accumulated. You can show the time in Hr:min:sec format or just plain minutes. Have fun! Command Description ta:clear This clears the accumulator ta:showmin Show the accumulated time in just minutes. ta:showhr Show the accumulated time There is a hotkey you need to set for adding the currently selected time.","link":"/alfred-addtime/index.html"},{"title":"Anybar Workflow","text":"This workflow requires the anybar application to be install. The easiest way to install is by home-brew cask: brew cask install anybar If you do not have home-brew cask installed, follow the instructions here: HomeBrew Cask. If you do not have HomeBrew installed, follow the instructions here: HomeBrew. Then execute the above line. Once installed, you can use the features of this workflow: anybar:launchLaunches anybar with optional port number. anybar:setgraphicSet the graphic for the anybar application. It will give a list of usable graphics. Start typing and the list will be narrowed down to the ones that match. Select the one and the last launched Anybar will be changed to that graphic. anybar:setportThis allows you to set the port number of the AnyBar app. anybar:setupThis copies the graphics I created to the ~/.AnyBar directory. There is a file action, Copy to Anybar, that will copy a png graphic to the ~/.AnyBar directory so that it can be used with the program. There are two External Triggers: SetGraphic and Launch. The SetGraphic external trigger expects a string with the name of the graphic, a ‘|’, and a port number. The Launch external trigger expects a UDP port number to launch the AnyBar program on.","link":"/alfred-anybar/index.html"},{"title":"Alfred Bible","text":"This workflow will request Bible passages from the “Ephesians 4:14” website: http://www.4-14.org.uk/xml-bible-web-service-api. Access to this API is currently free. This workflow will request the given verse from Alfred edit line or from the current OS X selection, request the verse(s), and return it in the clipboard and a notification. You can then paste it where ever you want. If you use the hotkey to search for the selected verse, it will automatically replace it with the text. There is also a hotkey to paste both versions: English and Thai. It now translates the English Bible book names to Thai. I will be adding more functionality to this workflow in the future and eventually have a full Bible study app. Let me know what functions you need.","link":"/alfred-bible/index.html"},{"title":"Alfred Browser","text":"The only keyword is ff for “Find a Folder”. It is a way to lookup a folding in the Alfred browser or in Finder. Very handy. There are two Alfred browser actions: Create a File Simply creates a file in the directory this file action is ran on. It will ask you for the name and then create it. Create a Directory Same as “Create a File”, but creates a directory instead. More coming in the future!","link":"/alfred-browser/index.html"},{"title":"Budget Workflow","text":"This workflow is for keeping track of budgets Calca.app. You can set a budget template (“b:budget” keyword and selecting “Edit Template”), and then create budgets each month (“b:budget” keyword and selecting “Make from Template”). The “b:budget” keyword will also show all of the available budget files that you can view and/or edit.","link":"/alfred-budget/index.html"},{"title":"Chrome Accessibility","text":"This workflow allows you to launch Chrome with the accessibility flag set so that you can use ShortCat.app with Chrome. It uses ctl-shift-h to launch Chrome or bring it to the front if running. ctl-shift-alt-h to quit Chrome.","link":"/alfred-chromeaccess/index.html"},{"title":"Compress Image Workflow","text":"This workflow is for compressing png images to a smaller size with scaling. You have to edit the script to your image size you want to scale. Type “ci” and then a name of the image file. A list of images will be shown for you to select the one you want to compress. When using Alfred to browse files, if you view a directory, the compress image command will show in the right arrow menu listing. You can then compress all the files in that directory. You have to have the Image Magick library and utilities already installed to use this workflow. You can now use the ‘ci.ext’ command to set the extension of the final image, which will cause conversion if set to a different type. I also added the ‘png-jpg’ and ‘jpg-png’ commands to simply convert the specifed images to the other format. The ImageMagick library is included now due to many people having problems installing it.","link":"/alfred-compressimage/index.html"},{"title":"Copy/Move to Workflow","text":"This workflow starts with a Add Directory to Copy/Move locations… File Action to create a list of directories to use as targets for a copy/move operation. If actioned on a file, the directory of the file is saved. Once you have a list, you can use copy to… or move to… file actions to move or copy files to a previously saved directory. The keyword cm:fav is used to view saved directories, remove one, go to one in Alfred Browser, or open in Finder.","link":"/alfred-copymove/index.html"},{"title":"Dockshelf Workflow","text":"This workflow is for automating the DockShelf program. The following items are defined: Commands:ds:space This command will show a list of workspaces currently defined. You can narrow the list by typing part of a name. Selecting one causes DockShelf to switch to that workspace. External TriggersFocus Named Workspace This external trigger will switch to the workspace given.","link":"/alfred-dockshelf/index.html"},{"title":"Dropzone 3 Workflow","text":"This workflow is for easily getting to the Dropzone 3 actions directory in Alfred. Use the keyword dz:browse to open the directory in Alfred Browser or hold the CMD key to show in Finder.","link":"/alfred-dropzone3/index.html"},{"title":"DwellClick Workflow","text":"This workflow has commands for DwellClick from Pilotmoon. You can: Command Description dc:enable Enable DwellClick dc:disable Disable DwellClick dc:action Performs the action selected. This is a script filter that will list all possible actions. If the command key is pressed, it delays the action for the next dwell click. If the function key is pressed, then the action is sted for use with the first hotkey action. The first hotkey action is for performing the stored action. The second is an example of making a fixed action to an hotkey. Very useful.","link":"/alfred-dwellclick/index.html"},{"title":"Alfred Editor","text":"This is a simple editor that makes use of Node Webkit Toolbox to run. Therefore, you need to install that workflow first. After installing this workflow, you need to execute ae:install to install the data files and the help files into their proper location. You will have a command line program called ae you can use to open files from the command line. The following commands are then useable: ae:openeditor This simply opens Alfred Editor without a file. ae:edit The currently selected file in Path Finder or Finder is opened in Alfred Editor. You also have an Alfred Browser command for opening files as well. An external command for opening files is available as well. ae:open This script filter gives several important directory locations that can be opened in the Alfred browser or Finder. ae:theme This script filter lists all the available themes. If you select one, that will be the new theme for windows opened in Alfred Editor. If you hold the command key while selecting, that theme will be opened in Alfred Editor to edit. ae:createtheme This allows you to create a new theme to use in Alfred Editor. It will request a new name, create the new theme from lesser-dark them, and open in Alfred Editor to edit. You will still have to select the theme for it to be used. ae:windowlist This will list each available Alfred Editor window name. The one selected will be brought to the front using the Mjolnir Workflow. The Mjolnir workflow has to be installed for this command to work. ae:keyboard This command allows you to choose either the Sublime keyboard layout or the Vim keyboard layout to use in Alfred Editor. If the Sublime layout is chosen, then the status line will always show it to be in insert mode. This workflow is a work in progress. I am currently working on a command prompt similar to Sublime with expandability using plugins. I also currently have only three themes. If you want to help me create themes, just send me the json file for your theme and I will include it.","link":"/alfred-editor/index.html"},{"title":"Expandrive Workflow","text":"This workflow gives some added features for ExpanDrive. You can use the hotkey “e” to change the current selection in Finder or Path Finder that is in a subdirectory for a ExpanDrive drive to a web facing reference to that file. You set up the ExpanDrive name using the “ed:edir” keyword. You then can set the web facing directory prefix with “ed:wdir”. The scripts currently do not check for accuracy, that is up to the user.","link":"/alfred-expandrive/index.html"},{"title":"Fish Workflow","text":"This is a toolbox of functions for working with the Fish Shell. You can install fish shell with homebrew: 1brew install fish Currently, the functions are: Command Description f:seteditor Set the code editor to use f:editfunction Edit a Fish function. It will show a list of possible functions to edit. If you press FN key and select a function, that function will be deleted. f:editconfig Edit the Fish Configuration file. f:newfunction Create a new fish function. with more to come.","link":"/alfred-fish/index.html"},{"title":"FoldingText Workflow","text":"This workflow is for working with todo lists using TaskPaper or FoldingText. But, you can set any other editor you want as well. Since TaskPaper uses plain text files for everything, it is easy to write scripts to add functionality that the program does not have. So far, I have the following keywords defined: Command Description t:settodo This command allows you to set the directory for your todos. It will setup the supporting files and sub-directories as well. This is the first action to perform with this workflow. t:createtodaytodo This command will take the everyday, weekly, monthly, and dated todos and combine them to the left over todos from the last time you created todos. It will also archive the finished todos. Todos that are repeated from the dated category are reset according to the repeat pattern. t:showtoday This command will open todays (or the most current) todo list in TaskPaper. t:showyesterday This command will open yesterdays (or the one before the most current) todo list in TaskPaper. t:showfinished This command will open the archived done tasks in TaskPaper. t:addmonthlytodo This command will ask for the day of the month and the task. It will then place that in the monthly todo directory for that day. When a new todo list is created, then it will pull in that days tasks. t:addeveryday This adds a task to the everyday task list. Every task placed in this list will be added to the current todo list everytime it is created. t:addweekdaytask This command will ask for the day of the week and the task. It will then place that it in the weekly todo directory for that day of the week. When a new todo list is created, then it will pull in that days tasks. t:doing This creates a new dated entry for the current journal. It will ask which journal to place the entry into. The standard doing.txt journal will automatically be created. t:showdoing This opens the current doing journal in TaskPaper. t:showprojects This opens the projects task file in TaskPaper. This is for ongoing projects and their tasks. t:sortdone This command takes the topmost TaskPaper list and sorts all of the done tag entries to the bottom. t:seteditor This command is for setting the text editor to use. t:newjournal This command will allow you to create new journal files. t:showjournal This command is for opening a journal in the editor. It will ask which journal and give you the current list of journals. t:settz This command is for setting the time zone. A list of time zones will be given and you select the one you are in. t:showtz This command will show the currently set time zone. t:next This finds the tag @next, marks that task done, and adds it to the next task. t:adddatedtask This allows you to add a task on a particular date that can repeat also. You can repeat by days, weeks, months, or years. It also shows all dated tasks and allows for deleting them. t:managemonthly This allows you to pick a monthly task and edit the file or delete the file. t:manageweekly This allows you to pick a weekly task to edit or delete. t:editeverydaytask This allows you to edit the everyday task file.","link":"/alfred-foldingtext/index.html"},{"title":"Hammerspoon Workflow","text":"This is a direct port of my Mjolnir Workflow. This workflow is for running scripts using Hammerspoon to control your windows. This is just a sample of the things that can be done. Follow this layout and you can do many neat things with Hammerspoon. First off, download Hammerspoon from https://github.com/Hammerspoon/hammerspoon/releases/latest. Once installed, reload Hammerspoon and run the “hs:install” to set the configuration file this workflow expects. After that, everything should just work. hs:install Configure Hammerspoon with the configuration file that this workflow needs. The original is backed up into the users home directory as hs.orig. hs:reload This tells Hammerspoon to reload the configuration file. hs:open This opens the Hammerspoon console to the foreground. hs:nup This nudges the current window up. hs:ndown This nudges the current window down. hs:nleft This nudges the current window to the left. hs:nright This nudges the current window to the right. hs:tcaff This toggles system caffenate. hs:leftthirds This moves the current window to the left 1/3 of the screen. hs:rightthirds This moves the current window to the right 2/3 of the screen. hs:lefthalf This moves the current window to the left half of the screen. hs:righthalf This moves the current window to the right half of the screen. hs:tophalfThis moves the current window to the top half of the screen. hs:bottomhalfThis moves the current window to the bottom half of the screen. hs:fullScreenThis moves the window to the maximum size on the screen. hs:minimizeThis minimizes the current window. hs:tzoomThis toggles the system fullscreen on and off for the current window. This moves the window to it’s own space taking up the entire screen. hs:runningThis will list all the running apps. You can then just select one to bring it to the front, select with alt key to hide it, select with ctrl key to unhide it, and select with the fn key to close the application. hs:snap This snaps the current window to the closes grid box area. hs:setgrid This requires you to put the x, y for a starting position in a 3x3 matrix for the current window. Then you give the width and height. Therefore, to move the current window to the upper left most block in a 3x3 matric, you would do “hs:setgrid 0, 0, 1, 1”. There is also a hotkey set to this value as an example. hs:command Type in a command string and it will be sent to Hammerspoon directly! There is also an external trigger HammerspoonCommand that will pass whatever is sent in the trigger to Hammerspoon using the command processor as in “hs:command”. This gives other workflows or scripts the ability to interact with Hammerspoon through Alfred. hs:expose This will list all applications. When an application is selected, it will show all of it’s windows in a matrix on the screen and ask the user for the coordinates of the one to show. It will then put all the windows back to their original position and bring the one selected to the foreground. If the application has only one window, it will simply bring it to the front. I also created a hotkey for doing Expose on FoldingText. The user can create more in the same manner. Just be careful to get the name of the application correct! hs:last This command undoes the very last window move. This assumes all window movements were done with Hammerspoon and this workflow functions.","link":"/alfred-hammerspoon/index.html"},{"title":"Haskel Text Converter Workflow","text":"This workflow demonstrates the Haskell Alfred Library. The workflow allows text to be converted to different formats. The following commands are: ht:conv This command takes a string in the Alfred Prompt. You then pick the type of conversion you want. The result is pushed on to the clipboard. ht:start This command starts a dedicated web server for performing the text conversion. ht:stop This command closes the dedicated web server. There is a hotkey for numbering the lines of text in the clipboard. There is also an external trigger for taking text from the clipboard and allowing the user to select a converter. There is a hotkey for triggering that external trigger also that takes the current selection and puts it into the clipboard.","link":"/alfred-haskeltextconv/index.html"},{"title":"MacVim Workflow","text":"This workflow adds commands for working with MacVim. The commands are: vim:editterminal Edit the selected file from Finder or PathFinder in a terminal MavVim. vim:editgui Edit the selected file from Finder or PathFinder in a gui MacVim It also has commands for the Alfred Browser to edit with MacVim in terminal or gui. There are hotkey you can define as well.","link":"/alfred-macvim/index.html"},{"title":"Instant Search Workflow","text":"This workflow is the translation of Brett Terpstra’s LaunchBar script for Alfred. You have to have his Instant Search Service installed. For more information, go to SearchLink - BrettTerpstra.com.","link":"/alfred-instantsearch/index.html"},{"title":"Name Sequencer Workflow","text":"This workflow allows you to sequence through some file names. You set the base name and extension. It will increment the count and place it in the clipboard and Growl it. If there is a file name in the clipboard, you can also just increment the count for the file name. Command Description setname This will set the base name for creating filenames. setext This will set the extension for the filenames created. clearcount This will set the counter back to zero. inccount This will increment the counter by one. deccount This will decrement the counter by one.","link":"/alfred-namesequencer/index.html"},{"title":"Markdown to Presentation Workflow","text":"This workflow assumes that the kramdown ruby package is installed on the system already. To install, simply type in a command line:1gem install kramdown Some system might require a sudo for this command. If you get an error message, try: 1sudo gem install kramdown This has a single file action that takes the given markdown file and converts it to a slide show in HTML and CSS. The command mds:theme is used to set the theme. It will let the user pick from a list of themes. The command mds:showtheme shows the user the currently set theme. This workflow comes from my tutorial How to Create a Slideshow Presentation From Markdown Notes. More coming soon…","link":"/alfred-markdownpresentation/index.html"},{"title":"Next Item Workflow","text":"This little workflow allows you to sequentially step through items in multiple list files. You use the “Next Item: Set File” file action on the file containing a list of items: One item per line. For example, a list of urls; one per line. Then the hot key will take the next item from the specified first list and copy it to the clipboard and to a notification. If you view all lists before the first list, you will see each corresponding item for each list. The counter is only incremented after passing the item from the first list. Command Description ni:move # This will move the last set file to the # list. If you do not move the file items to a list number, then it will not get sent to you. ni:item This will give the next item from the first list and increment the counter. ni:l # This will give the next item from the # list, but the count will not be incremented unless it is list 1. ni:inc and ni:dec These will increment or decrement the counter. ni:set allows you to set the counter to any number. ni:clear will clear the counter and erase the temporary files. ni:current will display the current count number. The items are addressed using a zero reference. Therefore, if the counter is 1, the the second line in the file will be displayed. Setting a new list will clear the count. The file specified is copied to a work area that all the other scripts will use to access it. Therefore, you do not need to worry about the original file being changed.","link":"/alfred-nextitem/index.html"},{"title":"Notes Workflow","text":"This workflow if for taking notes. It was designed for Calca, but can be used with any editor. So far, I have the following keywords: Command Description n:setnotes This allows for the setting for the location of your notes directory. It is a directory select. Therefore, the directory has to already exist. n:notes This will list every file in the notes directory that ends in “.txt”. You can create a new notes file or open an existing notes file. If you select one of the files while holding the key, you can append the contents of the clipboard to the specified notes file. If that is a new file, it will be started with the clipboard contents. You can move the selected file to the trash by holding the key. This requires the trash command to be in the “/usr/local/bin” directory. You can convert the markdown file to html using the key when you press on a file name. This requires the pandoc program to be loaded onto your system. The key will open the file with Marked.app. n:setEditor This allows you to set the editor that you want to use for editing your notes. It defaults to Calca, but you can set it to any application you want. It will bring up a file selector with applications from your main application folder and your personal applications folder.","link":"/alfred-notes/index.html"},{"title":"NW.js Workflow","text":"NW.js is an application for developing applications using web technologies. You can create an application with HTML, CSS, and JavaScript using any io.js (formerly node.js) library. There has been a move to this new version due to the node.js project in a stalemate and far behind in development compared to what Chrome is using. Once you have your application developed, you can zip it up with a config.json file. The workflow provides the following commands: Command Description nw:website This opens the NW.js website on GitHub. If you hold down the &lt;cmd&gt; key, it will open the io.js website. nw:open When the user starts typing, a file ending in the “.nw” extension is looked for according to the work typed. Therefore, if there is a file called “new.nw”, as soon as “n” is typed , that file will be displayed. nw:opendir Opens the current directory in Finder or Path Finder using Node Webkit. The config.json file should be in that directory. nw:help Opens this help program. There are also two File Actions defined: Open Directory that is available on directories, and Open NW.js Package that is available on NW.js packages. There are also two External Triggers: RunNWjsDirectory and RunNWjsPackage which work the same as the file actions. These allow external programs or other Alfred workflows to call a Node Webkit application by passing the full path of the application bundle or directory. The help option for this workflow shows an example of using these External Triggers. The following code will open the help application that is located in the same directory as the code: 123thisDir=`pwd`;/usr/bin/osascript -e \"tell application \\\"Alfred 2\\\" to run trigger \\\"RunNWjsDirectory\\\" in workflow \\\"com.customct.NWjs\\\" with argument \\\"$thisDir/help\\\"\" The directory path given in the argument tells NW.js where to load the program. It is set with the pwd command. There will be more tutorials and hacks using this workflow on my website Custom Computer Tools.","link":"/alfred-nwjs/index.html"},{"title":"OctoPow Workflow","text":"This workflow assumes you have octopuses and pow installed on your computer with each octopress site linked into the ~/.pow directory. The POW workflow is a great compliment to this workflow and is called by the preview function. First, set up your editor with “octopow:editor”. Then, set you current POW project with “octopow”. You can create/edit/delete posts with “octopow:post”. You can generate your site and preview it in POW using “octopow:preview”. You can then deploy you changes with “octopow:deploy”. This workflow assumes you have already setup your Octopress site and POW programs on your system. More to come! All workflows now work with AlleyOop, except where mentioned otherwise. Please let me know if you have any problems, suggestions, or commits.","link":"/alfred-octopow/index.html"},{"title":"Open in Alfred","text":"This workflow allows you to open a Terminal window or iTerm windows directory in Alfred. You type “oa:install” to install a helper script into your /usr/local/bin directory. Make sure that directory exists, is writable by you, and in your path. Then you can use these commands: Command Description oa:terminal open the topmost terminal window in Alfred oa:iterm open the topmost iterm window in Alfred","link":"/alfred-open/index.html"},{"title":"Picate Workflow","text":"This workflow is for programing using the Picat language. The following commands are available: pic:installThis will download and install Picat in to the ~/Documents directory. It then sets up the variables to use in all the other commands. pic:showdirThis shows the directory of the install Picat program to the user. pic:setscriptThis sets the Picat script to execute in the other commands. pic:editscriptThis opens the Picat script in to the code editor that is setup with pic:seteditor. pic:seteditorThis allows for setting the code editor to use to edit Picate scripts. pic:runThis runs the currently selected Picat script. pic:suserThis opens the Picat User Manual. pic:stutorialThis opens the Picat Tutorial. pic:sstartedThis opens the Picat Getting Started Manual. There are also three File commands to use in the Alfred Browser: Edit Picat FileAllows you to edit the selected Picat file in the Alfred Browser using the editor setup in the pic:seteditor. Run Picat FileThis runs the current Picat file in the Alfred Browser. Run Files through Picat ProgramThis will pipe the current file to the currently setup Picat script.","link":"/alfred-picate/index.html"},{"title":"Peppermint Workflow","text":"This workflow is for using the Peppermint code editor. You can learn more about Peppermint at http://osxpeppermint.com/. The commands are: p:edit Gets the file in Finder or Pathfinder and opens it in Peppermint editor. HotKey is setup to take the current OS X selection and open it in slap. There are also Alfred browser commands and an external trigger defined for it.","link":"/alfred-peppermint/index.html"},{"title":"Powerline Workflow","text":"This is a toolbox of functions for working with Powerline. Currently, the commands are: Command Description pl:loc Gives the location of the pip installation of Powerline. It will open it in Alfred, in Finder if the ctrl key is pressed, or in Terminal if the cmd key is pressed. pl:doc Will open the documentation for Powerline. pl:fonts Will open the fonts download page for Powerline. pl:github Will open the GitHub page for Powerline. pl:editor Will allow you to set the text editor for editing Powerline configuration files. pl:conf Will allow you to browse the Powerline configuration directory and edit the files and create new files. pl:goconf This will open the configuration directory in Alfred or in Finder if the cmd key is pressed.","link":"/alfred-powerline/index.html"},{"title":"Quiver Workflow","text":"This workflow allows you to create templates with Handlebar syntax inside of the Quiver program. To use the workflow, you have to have Node.js installed first. I recommend using Homebrew to install it. Once Node.js is installed, go to your Quiver Library file in Alfred Browser and select the “Set Quiver Library” file action. This tells the workflow where your templates (or snippets) are to be kept. Create a workbook called “Snippets” with one note called Defaults. The Defaults note has to have one code block set to JSON and the defaults for the Handlebar expansions set. The rest of the notes will be templates. When you run “qt:expand” or “qt:exptext”, it will list all of your template files in the Snippets notebook. When you select one, it will be expanded with any json cell the note and the Defaults json note data. The “qt:expand” will put the result into your clipboard and the topmost application. The “qt:exptext” will give it to TextExpander to expand and place in the topmost application. With the “qt:exptext” command, TextExpander will also expand any of it’s macros in the template file. I mostly use it for placing the cursor after expansion. These two commands also have an associated Alfred Browser File action. There are four special helper function for Handlebars defined. These functions should be placed inside double or triple brackets. They are: save &lt;name&gt; &lt;text&gt;This command creates a helper named “&lt;name&gt;” with the expanding text of “&lt;text&gt;”. It also places the given “&lt;text&gt;” at the point of definition. This allows you to create text snippets on the fly inside the template. Very handy. clipboardThis helper command places the current clipboard contents at the point in the template. date &lt;format&gt;This will format the current date and time as per the format string given. See the help document that is loaded upon initialization. cdate &lt;date/time&gt; &lt;format&gt;This takes the date/time string and formats it according to the format given. See the help document that is loaded upon initialization. The following data expansions are defined as well: cDateMDY gives the current date in Month Day, 4-digit year format cDateDMY gives the current date in Day Month 4-digit Year format cDateDOWDMY gives the current date in Day of Week, Day Month 4-digit year format cDateDOWMDY gives the current date in Day of Week Month Day, 4-digit year format cDay gives the current date in Day format cMonth gives the current date in Month format cYear gives the current date in 4-digit year format cMonthShort gives the current date in Short Month name format cYearShort gives the current date in 2-digit year format cDOW gives the current date in Day of Week format cMDthYShort gives the current date in Month day 2-digit year format cMDthY gives the current date in Month Day 4-digit year format cHMSampm gives the current date in h:mm:ss a format cHMampm gives the current date in h:mm a format cHMS24 gives the current date in H:mm:ss 24 hour format cHM24 gives the current date in H:mm 24 hour format There is more to come!","link":"/alfred-quiver/index.html"},{"title":"S3cmd Workflow","text":"This workflow gives the ability to upload files to Amazon S3 using the s3cmd commandline function. You can download the s3cmd utility at http://s3tools.org/s3cmd. The workflow currently contains a copy of the s3cmd tool. You will need to open a terminal to the directory that contains the workflow to set your s3 credentials. Please see the directions at http://s3tools.org/s3cmd to know how to set it up. Here are the currently supported keywords and file actions: Command Description s3c:copydir This keywork allows you to pick a directory that contains videos (mp4 mov). The videos will be copied to the corresponding directory on s3. Make sure to set the base directory using “s3c:base”. s3c:base You use this keyword to set the base directory for s3. It should be the format of “s3://{bucket}/directory/..”. It has to be set to “s3://{bucket name}” as the minimum. s3c:target This keyword is used to set a target directory under the base directory to copy individual files to s3 using the file action. s3c:webheader This keyword is used to set a web header for getting a web friendly url to an item in your s3. s3c:sbase This will show the base directory in a notification. s3c:starget This will show the target directory in a notification. s3c:swebheader This will show the header to make a web friendly address in a notification. s3c:copy file This file action will copy the file in the Alfred browser to the base and target directory on s3. s3c:list This keyword action allows you to browse your S3 directory. If you hit “cmd-enter” on an item, it will download it to your Download directory. If you hit “alt-enter” on an item, it will set that directory as your target directory for uploading files. If you hit “ctl-enter” on an item, it will push a web facing friendly url for that item in to the clipboard. If you hit “shift-enter” on an item, it will set the items directory as the base directory for future browsing. If you hit “function-enter” on an item, you can move the item to a new name or location. It will prompt for the new location with a copy of the original item twice. You change the second one. If you start typing after the keyword, your selection will be reduced to selections that match what you type. s3c:configure This keyword will open a terminal and start the configuration process for the s3cmd command line tool. This has to be done before using the other commands.","link":"/alfred-s3cmd/index.html"},{"title":"Scratch Pad Workflow","text":"Sometimes you just need a place to edit some text quickly. Or, simply write a short note to store in the clipboard history (it actually works better than you think). That is where this workflow comes in handy. After you set a hotkey, you can select text and edit it on the Alfred command line. When you press enter, it will be placed into the clipboard. If you press and enter, it will place it into the clipboard and the top most application. If you invoke the keyword “sp:” or if you press the hotkey without a selection, it will offer to put the clipboard as the text to edit. Press enter on the “clipboard” option and the contents of the clipboard will be copied to the Alfred command line for editing.","link":"/alfred-scratchpad/index.html"},{"title":"Sermon Scheduler Workflow","text":"This workflow aid in the creating of my sermon schedules. Use ss:setdirectory to set the directory for sermons (or whatever you want to create schedules from a template). The use ss:seteditor to set the editor you want to use (I use Sublime). You then can use ss:create to make a new schedule by the template (you might want to edit the template first with the ss:edit and selecting the template). Then use ss:edit to edit one of the schedules or the template. The unique thing about the workflow is that new schedule’s name will always be something like: 2014-Feb02-Feb08.md. The current year, first day of the week and the last day of the week. The ss:create gives you names for the current week and the next 4 weeks. This works great for me being a missionary. You can change it to meet your own needs.","link":"/alfred-sermon/index.html"},{"title":"Template Workflow","text":"This workflow allows you to create templates with Handlebar syntax. To use the workflow, you have to have Node.js installed first. I recommend using Homebrew to install it. Once Node.js is installed, go to your snippets directory in Alfred Browser and select the Set Template Directory file action. This tells the workflow where your templates (or snippets) are to be kept. You then run the tp:install to install the example templates and a default global.json file. This file should be edited to match your needs. Any data item added to this file is then passed to the Handlebar render as data. All templates have to have the “.txt” extension. If you want data to be associated with a template, then place a JSON file with the same name as the template in the t When you run tp:expand or tp:exptext, it will list all of your template files in the template directory. When you select one, it will be expanded with any json file with the same name and the global json file data. The tp:expand will put the result into your clipboard and the topmost application. The tp:exptext will give it to TextExpander to expand and place in the topmost application. With the tp:exptext command, TextExpander will also expand any of it’s macros in the template file. I mostly use it for placing the cursor after expansion. These two commands also have an associated Alfred Browser File action. The tp:open command opens the template/snippet directory in Alfred Browser. If you press the Command key, it will open it in the Finder. The tp:editglobal will open the global.json file in your template directory with the default editor for JSON files. The tp:create command requires a name. A file with that name and a “txt” extension is created in the template directory and opened in the default editor for files with a “txt” extension. The tp:createclip command is the same as the tp:create, but this command takes the current clipboard contents as the text for the file. It is then opened in the default editor for “txt” files. The tp:edittemplate command will give a list of templates. When you choose one, it is opened in the default editor for a file with the “txt” extension. The tp:edittemplatedata command will give a list of templates. When you choose one, it’s corresponding JSON file is opened in the default editor for a JSON file. There are two special helper function for Handlebars defined. The helper functions given here are just the names. They have to be inside of two curly brackets to work. This is because I use the same system on my web server to expand macros. They are: save &lt;name&gt; &lt;text&gt;This command creates a helper named “&lt;name&gt;” with the expanding text of “&lt;text&gt;”. It also places the given “&lt;text&gt;” at the point of definition. This allows you to create text snippets on the fly inside the template. Very handy. clipboardThis helper command places the current clipboard contents at the point in the template. The following data expansions are defined as well: cDateMDY gives the current date in Month Day, 4-digit year format cDateDMY gives the current date in Day Month 4-digit Year format cDateDOWDMY gives the current date in Day of Week, Day Month 4-digit year format cDateDOWMDY gives the current date in Day of Week Month Day, 4-digit year format cDay gives the current date in Day format cMonth gives the current date in Month format cYear gives the current date in 4-digit year format cMonthShort gives the current date in Short Month name format cYearShort gives the current date in 2-digit year format cDOW gives the current date in Day of Week format cMDthYShort gives the current date in Month day 2-digit year format cMDthY gives the current date in Month Day 4-digit year format cHMSampm gives the current date in h:mm:ss a format cHMampm gives the current date in h:mm a format cHMS24 gives the current date in H:mm:ss 24 hour format cHM24 gives the current date in H:mm 24 hour format filename gives the name of the template file. If the clipboard was expanded, then it gives nothing. Let me know if you would like other macros!","link":"/alfred-template/index.html"},{"title":"Slap Workflow","text":"These commands are for working with the slap terminal editor easier. You can learn more about slap at https://github.com/slap-editor/slap slap:edit Gets the file in Finder or Pathfinder and opens it in iTerm using slap. slap:install Runs the npm install for slap. It is assumed that node and npm are already installed. The best way to install node is with HomeBrew (http://brew.io). A hotKey is setup to take the current OS X selection and open it in slap.","link":"/alfred-slap/index.html"},{"title":"Text Case Converter in Swift","text":"This workflow is a replication of my “tm:case” command of the Text Massager Workflow done in Swift. You have to have xCode 6 beta 6 to recompile the executable, but it should run on any system that is OS Maverick and up. Instructions for recompiling the Alfred Swift Library and the program is in the workflow directory. The one command is “tc:convert”. The string given will be shown in capital case, upper case, lower case, and title case.","link":"/alfred-textcaseconvswift/index.html"},{"title":"Text Massagers Workflow","text":"Text MassagersI am often changing text around to different formats in large quantities. So, I made a workflow for keeping all of them. I call it text massagers because you are “massaging” the text with the script. You can use this as your template for your own massagers. All of these scripts takes the item from the clipboard, massages it, and places back into the clipboard while showing you the results. Command Description m Expects a markdown anchor line in the clipboard and converts it to a HTML anchor within a list item. t Fixes a time into HH:MM:SS format no matter what it was before. ” Takes the current selection and passes it to the “tm:select” command for selecting the text massager from a list. The list will show the resulting string. It will then perform the selected “massage” to the text and copy it to the clipboard and back into the document it was grabbed from if possible. tm:select Takes the string on the Alfred Prompt and runs it through the different massagers and shows the output in the list. When the user selects one of the massagers, it will copy the resulting string to the clipboard and to the document that is open. “ Takes the current selection and passes it to the “tm:selectn” command for selecting the text massager from a list. It will then perform the selected “massage” to the text and copy it to the clipboard and back into the document it was grabbed from if possible. tm:selectn Same as “tm:select” except for not displaying the results in the list. This is for slower computers.","link":"/alfred-textmassagers/index.html"},{"title":"Textsoap Cleaners Workflow","text":"This workflow interfaces with TextSoap, a great text processing program. I now use it more than awk! The following are the keywords defined: Command Description tc:clean This keyword will present a list of all previously used cleaners to pick from. Start typing to narrow down the list. When you hit enter on an entry, it will perform that cleaner on the clipboard. If you hold down the fn key, it will delete that cleaner from the list of preferred cleaners. You can set a hotkey to repeat the last ran cleaner on the clipboard. tc:full This keyword will show all available cleaners obtained from the tc:getcleaners. The cleaner you select will be performed on the clipboard and the cleaner will be saved into your list of preferred cleaners. tc:fulla This keyword is the same as tc:full, but will append the results to the topmost application. You can set a hotkey to perform this on the current selection as well. tc:seteditor Allows you to set the text editor for editing the list of preferred cleaners. tc:editlist Allows you to edit the list of preferred cleaners using the editor already setup. tc:getcleaners This will query TextSoap for the list of cleaners it has. You should do this each time you create new cleaners you want to use with this workflow. tc:addcleaner This will set the string given into the list of preferred cleaners. tc:count This will count the number of lines, words, and characters in the clipboard. If a string is passed with it, it will count that string. You can set a hotkey to count the current selection. tc:loadpopclipext This will load the popclip extension for executing the last cleaner on the highlighted text. There are also three places to set your hotkeys: one for doing a character/word/line count of your selection, one for evoking the last cleaner on selected text, and one for choosing from the full list of cleaner to apply on the currently selected text.","link":"/alfred-textsoap/index.html"},{"title":"Textwell Workflow","text":"This workflow is for working with the Textwell program for the Mac. It currently give a command for opening it quickly, tw:front. It also has: tw:editThis copies the selected text and pastes it into TextWell. It also saves the name of the application that the text was copied from. tw:pasteThis copies what is in TextWell and pastes it back into the application that the text was copied from. There are hotkeys setup for the last two commands as well: tw:edit and tw:paste. You have to assign the hotkeys yourself. This gives similar feature as QuickCursor, though I have never used that application. I am exploring more ways to extend this workflow. Keep an eye on it!","link":"/alfred-textwell/index.html"},{"title":"Thai Translation Workflow","text":"This workflow does web scraping on the http://www.thai-language.com/ site to translate words from english to thai/thai to english. It does an exact match first. If the exact match fails, then it does an inexact match. Consequently, the results do not always produce what you would expect all the time. Remember to set the result count with “tt:setcount”! tt:engthaiTranslate an English word to Thai. tt:thaiengTranslate a Thai word to English. tt:setcountSet the number of results to display to the user.","link":"/alfred-thai/index.html"},{"title":"Alfred Timekeeper Workflow","text":"A time tracking extension that allows for any number of projects and tracking the time between them. Still early stage, but very useable. It also has a basic graphical viewing of work hours with a calendar for lookup. I have started recreating some of the PHP scripts as full go language programs. Please let me know if you have any problems. The following keywords are used: Command Description atk:addproject This allows you to create a new project atk:project This allows you to set the current project atk:state This allows you to set the current state of a project. atk:help Gives a list of commands for Alfred Time Keeper atk:current This will show the current project, time, and state. atk:week This shows the time for the current project this week. atk:month This shows the time for the current project this month. atk:worktime This displays the time worked on all project for a particular day.","link":"/alfred-timekeeper/index.html"},{"title":"Timestamp Workflow","text":"This workflow is a demonstration on how to make a custom time stamp expander. ts:stamp This causes the current time to be made into a time stamp in the format given. It then copies to clipboard. This command is also trailerable with a hotkey.","link":"/alfred-timestamp/index.html"},{"title":"Title Case Server Workflow","text":"This workflow goes with an upcoming tutorial on using golang with Alfred on tutplus.com. It currently runs a small web app for doing title case conversions. The workflow has these commands: Command Description tcs:launch This will start the title case server on port 9910 tcs:stop This will stop the title case server tcs:convert This will take a string on the Alfred prompt, send it to the title case server, and return the result in a notification and the clipboard. It also has a hotkey specified to take the selected text, convert it, and paste it back in place. You will have to set the hotkey yourself. The go source code is included in the workflow.","link":"/alfred-titlecase/index.html"},{"title":"Alfred URI Handler","text":"This workflow has one command “au:install”. Once you run it, a URI handler for Alfred will be installed. This is used to trigger external triggers in any workflow. The format is: alfreduri://com.apple.AppleScript.AlfredURIhandler?wf=&lt;workflow Bundle ID&gt;&amp;arg=&lt;arguments&gt;&amp;ext=&lt;external trigger name&gt; The arguments should be URI encoded (ie: no spaces, but %20 instead). If you update the workflow, you have to re-apply the handler. Also, do not delete the workflow or the functionality will be removed. You can also launch a search in Alfred with: alfreduri://com.apple.AppleScript.AlfredURIhandler?search=&lt;search query&gt; The search query needs to be URI encoded as well.","link":"/alfred-uri/index.html"},{"title":"Video Time Workflow","text":"This workflow is used to find the duration of a video. You can use the ‘getvideotime’ keyword to search for a particular video to get the duration. The ‘getvideodir’ keyword is used to scan a full directory. Both are also file actions in the Alfred browser.","link":"/alfred-videotime/index.html"},{"title":"Zip Info Workflow","text":"This workflow has one command: zi:view. This will show you the zip files in your home directory’s Documents folder. When you select one, it will open a Python window showing the contents of the zip file.","link":"/alfred-zipinfo/index.html"},{"title":"BitBar Scripts","text":"BitBar is a great program for putting custom icons in the macOS menubar. Check out my tutorial on BitBar. Current Files PluginThis plugin allows you to quickly edit commonly edited files using a selected editor. This plugin works with the BitBar Alfred workflow, but is usable by itself. This plugin requires three files in your home directory: .myCurrentFiles A list of all files that you want to appear in the menu. One file per line with it’s complete path. You can use ~ for the home directory, but it has to be the first character in the line. .myeditors This is a list of editors that you want to use with the plugin. It will be shown in the editor list. The format is {Name displayed}|{command or path to the executable}. The only editors that currently have a command setup is sublime, emacs, and vim. You will need to change the plugin for the executable paths of these editors. .myeditorchoice This is the current editor being used by the plugin. It will contain either sublime, emacs, vim, or the path to the program. I describe this plugin in detail in my tutorial on Bitbar. The tutorial has a download for the Alfred BitBar workflow as well.","link":"/bitbar/index.html"},{"title":"Dropzone Actions","text":"I have really enjoyed the Dropzone program for the Mac. It is a platform of utilities for processing files and text. If there is not an action you need already, then just create it yourself! Each action is a directory with a Ruby or Python file, configuration file, and an icon file with the extension “.dropzone”. You can view alternate actions here or fork Dropzone’s GitHub account, add your action, and give a pull request. As I write new actions, I will add them to the list below. Name Description UnpackZipDir.dropzone This destination will allow the user to click on it to set a destination directory. After that, any file(s) dragged on to it will be unzipped into that directory. Works great for installing new books into theWord Bible program. Dropzone ArticleI have also written an article on writing destinations for Mac Tuts+. It is called: Writing DropZone Destinations Writing Dropzone 3 Actions","link":"/dropzone/index.html"},{"title":"Fman Extensions","text":"fman is a flexible, extensible file manager for macOS, Linux, and Windows. You can extend fman’s functionality by writing exensions in Python 3. I wrote a tutorial on writing extensions for fman on TutsPlus. I have been creating many entensions for fman. Each extension below has a link to the GitHub repository for the extension. To install an extension, in fman press the command prompt key (&lt;shift&gt;+&lt;cmd&gt;+p), type install plugin, and press the &lt;enter&gt; key. Fman will then show a list of plugins that you haven’t installed yet. Select the extension you want and it will be usable after restarting fman. If you have an ideal for an extension that you would like to see, send me a tweet at @CustomComputerT and I might just make it for you! I love creating extensions for the programs I use. Here are the ones I’ve created so far: Favorites The favorites extension gives you a way to store directories by a user defined name and go to that directory from a search list. It also allows you to create shortcut directories that allow you to specify directories relative to the shortcut. Then you can sync the file to another system, set the shortcut directory for that system, and use the same favorites! This extension also has four quick set and go to directory memories that are lost on rerunning fman. Just one hotkey to set and to go to that directory. ProjectManager The project manager extension allows you to set a directory as a project. When you enter a project directory for the first time (ie. Not already working in that project, but when working on a different project), it will run a script to set up you development environment. This extension will also show a list of project directories and allow you to go directly to them. Swap Panels The Swap Panel extension give you a hotkey to swap the directory shown in each panel. Simple little extension, but I use it a lot! DeSelect The DeSelect extension will deselect all selected file in the current file pane. Fman now has a built in for this. DuplicateFileDir This extension will make a duplicate of the file or directory under the cursor or selected. It will add the text ‘-copy’ to the file or directory. MoveToDir This extension allows you to move the selected file to a specific directory. If the directory doesn’t exist, it creates it. OpeniTerm2 This extension is for macOS. It opens the current directory in iTerm 2 terminal emulator. OpenWithEditor This macOS extension allows you to edit the current file in the editor that is selected in the BitBar extension currentFiles.1h.rb. You have to have the BitBar program and extension installed to use this extension. SelectByRegExp This extension allows you to select files in the current file pane using a regular expression. It toggles the selection, so you can also use it to de-select files based on a regular expression. ShowVideoFileProperties This extension shows video file properties. It uses ffmpeg and that program has to be installed on your system. VersionInfo This extension shows the current fman version, api version, and python version used in fman. VimNavigation This extension allows you to navigate using Vim style keyboard shortcuts. You have to preceed them with a shift. ZipSelected This extension zips all the selected files using the current directory as the name for the zip.","link":"/fman/index.html"},{"title":"FoldingText Extensions","text":"FoldingText has become my Markdown editor of choise. I use it along side of Marked 2. I use my FoldingText Alfred workflow to control things. While working with FoldingText, I have created some extensions as well. Give them a try and let me know what you think! If you have ideas you would like to see in FoldingText, let me know and maybe I will write it. I love extending applications. Extensionsimath This extension adds the ability to run calculations in FoldingText. Just add the .imath to the end of a line. If it is a header, then just write math expressions after it. If it is not on a header, then indent math expressions after it. A line ending in =&gt; will start evaluating every line up to the extension line, then search for previous .imath section that are not folded, and then evaluates the math. You define variables normally with the = sign. Since previous .imath sections that are not folded are evaluated, you can keep cases for variables in folded sections. Remember, the last variable definition will be the one used in function evaluation. Therefore, fold the sections that you do not want to evaluate and they will be hidden from the evaluator. This gives a way to do case studies with the math. I finally have funtion definitions working. You define a function and use it in other areas. See the example below. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960Normal Example Math.imath z = 9 y = 8 p = 5 x = 1.5 f = x^z + x^y + p f =&gt; 69.072265625### Header Example Math.imath(2 * 2)/7 =&gt; 0.57142857142857144 + 8 =&gt; 12sin(50 deg) =&gt; 0.766044443118978log(5) =&gt; 1.609437912434100310^log(5) =&gt; 40.6853365119737510^1.61 =&gt; 40.73802778041128a = 1b = 2c = 1result = (b + sqrt(b^2-4*a*c))/2*aresult =&gt; 1g = [ 1, 2, 3]h = [ 5, 5, 5 ]g-h=&gt; [-4, -3, -2]g = [ 1, 2, 3]h = [ 5, 5, 5 ]g+h=&gt; [6, 7, 8]### Function definitions.imatha = 3b = 4c = 5f(x) = a*x^2 + b*x + cf(10) =&gt; 345 Since I am using FoldingText to write this page, the examples above are live from the extension. The extension uses the Math.js JavaScript library for doing all the calculations. I’m thinking about doing graphs…. Other FoldingText SolutionsIf you have not checked it out, you should visit the Alfred Workflow for FoldingText that I wrote. It gives many great features that I use everyday: bookmarking, adding notes to tags, site mapping, etc. It is very useful. I also have most of it translated to a LaunchBar 6 FoldingText Action. FoldingText TutorialsI have also written an article on writing FoldingText extensions for Computer Tuts+. It is called: Customizing FoldingText","link":"/foldingtext/index.html"},{"title":"PopClip Extensions","text":"Popclip is a pop-up menu for your cursor. It is context sensitive and easy to expand with extensions. If you are good at programming, you can make your own extensions out of PHP, shell scripts, Ruby, or any language you want to use. As I write new extensions, I will add them to the list below. Extensions Name Description surround.popclipext This extensions will surround the current selection depending on the key pressed at the same time. If the command key is pressed, then it is surrounded in “##”. If the option key is pressed, it is surrounded in the &lt;h3&gt; tag. If the option and command keys are pressed, then it is surrounded in the &lt;h1&gt; tag. If no key is pressed, then it is surrounded with “**”. TSLastCleaner.popclipext This extension will take the highlighted text, pass it to Alfred TextSoap Workflow to perform the last text cleaner. Then it gets pasted back! Popclip ArticleI have also written an article on writing destinations for Mac Tuts+. It is called: PopClip: Scripting Extensions - Using PHP to write an extension for looking up Bible references.","link":"/popclip/index.html"},{"title":"Welcome","text":"My dad always told me, “make sure you have the right tool for the job! The wrong tool will take longer to get the job done, and usually will make a mess of it.” I have always lived by that rule. Unfortunately, many people tackle their computer jobs with tools (programs) that are not appropriate for the task. Custom Computer Tools is working to help with this problem. At Custom Computer Tools, we are putting together tools to help you use your computer more efficiently. The right tool makes all the difference. Please browse what we have or contact us with your special needs for an estimate on costs. We are here to serve you. WordPress Script ManagerHave you ever created a new script for adding to your WordPress site by editing the functions.php file or using a plugin like “MaGiKS Proper PHP Include”? It is a great plugin and I used it for several years. It had one problem that kept bugging me. Every time I updated my theme with the automatic updates, I lost my PHP files! I would often forget and have to re-upload the files. Lost scripts are no longer a problem with WordPress Script Manager. WordPress Script Manager keeps all of the scripts in the database for safe keeping. You can update WordPress, themes, and plugins without ever worrying if you forgot to save something. You can work with WordPress PHP, Javascript, SQL tables, CSS, and Less scripts and embed them anywhere in WordPress with a shortcode. You can also show off your code with a code highlighting shortcode. WordPress Script Manager also has a widget for placing your code in any side bar. If you need to tweak a WordPress Filter or Action, you can even create scripts for that. WordPress Script Manager is powerful enough to create full plugins to really get your job done right. Alfred WorkflowsIf you are on a Mac OSX computer, you need to get Alfred. Alfred is Spotlight on steroids and is a great tool for getting a lot of work done. The lastest version is Alfred 2. With this new version, you can create workflows to extend or supplement the things that Alfred can do. It is a very flexible and powerful system. Here is where I am sharing the workflows that I have made. Web API WordPress PluginMany times when a site powered by WordPress wants to supply a Web API for their site, they will work outside of WordPress using either PHP or Ruby on Rails. Then they have to write their own functions to get to the information inside the database for their WordPress site. I always thought that was a little backwards. That is why I wrote the Web API plugin for WordPress.With the Web API plugin, you no longer have to do that. This plugin creates a custom post type called API. When you create an API post, all of the content will be executed as PHP code just before the theme stuff is executed in WordPress. Therefore, you have full access to all the WordPress PHP functions to create whatever you want: JASON output, HTML sniplets, full HTML pages without any of the sites theme or code, or anything else you can imagine. After the code on the page is executed, then the PHP session will be ended. Dropzone DestinationsI really like the new tool: Dropzone! Check out my resourses about this wonderful tool! Textsoap CleanersSince I process a lot of text documents, I really like tools to make that job easier! I found the best one around: Textsoap! Check out what I have about this great tool! Popclip ExtensionsI always love finding new tools. Popclip puts a little, context sensitive menu right at your cursor that you can extend as much as you like. It really is a time saver! Check out what I have written for it. FoldingText ExtensionsFoldingText has become my markdown editor of choice these days. I love coding, so naturally I have created extensions. You can check them out here. I also have an Alfred 2 workflow for FoldingText. Check them out! LaunchBar ActionsLaunchBar 6 is a handy assistant on the Mac similar to Alfred 2. I have been asked to port my Alfred 2 workflows to LaunchBar. Therefore, I have a page listing the actions I have made. fman File ManagerMy favorite file manager is fman because I can add functionality using Python extensions. Here is a collect of extesions that I have created. BitBarBitBar is a free program for placing information into the macOS menu bar. Here are some scripts I’ve created for the program.","link":"/main/index.html"},{"title":"WordPress Script Manager","text":"Script ManagerThe Script Manager plugin for WordPress allows the administrator to insert HTML, CSS, PHP, LESS, SQL tables, and/or JavaScript into any post, page, or even into the widget areas. The scripts are kept in the database. Therefore, you never have to worry about updates to WordPress, plugins, or to your theme accidentally deleting your code. Scripts can be attached to any of the WordPress Actions or Filters, whether made by WordPress core or by a plugin. Therefore, you can create scripts that change basic behaviors of WordPress or extend WordPress. This gives you total power and control over your WordPress site. We have tutorials showing step-by-step process to make a tutorial post type, a HTML5 FAQs post type and page, and even more to come in the future. Your imagination and programming skills are your only limit to what can be done with WordPress with Script Manager. We are planning more power and flexibility to come in the future (adding more computer language integration, connection to menus, etc). This plugin is not aimed at beginners, but can be used to teach WordPress functionality. Only the administrator user can use this plugin’s functionality. Features Inserting scripts into pages/posts using a shortcode. Run your scripts as a widget. Shortcodes have insert-able buttons for the visual or HTML editor. Code highlighting insert-able into any page/post by either enclosing in a shortcode or inserting from the code database with a shortcode. Code highlighting can be added by buttons in the visual or HTML editor as well. You can change the code highlighting colors to match your web site or likes. All code is stored in a database. Never worry about accidentally deleting special code with updates. Also, you will never have to worry again about the visual editor removing code (ie: iframes). Multiple language support: HTML (mixed mode also supported) WordPress PHP - PHP code that is a part of WordPress JavaScript Less CSS SQL Also, future plans to support non-WordPress PHP, Pearl, Tcl, Ruby, Node.js, etc Able to add code to any WordPress Actions or Filters. Add Actions or Filters as needed and that other plugins create. Enough flexibility to create a full plugin with this plugin. Can be used to combine multiple plugins into one. This decreases load times. Complete contextual help files for the plugin. Tested on WordPress 2.8 through 3.5 DownloadYou can download the plugin from my GitHub repository. If you have ideas on expanding it, fork it and give me a pull request! This is now a community resource that I am hoping others will pitch in and help. As far as I know, it is currently running on 7 different sites. If you know of a site with it, please let me know.","link":"/scriptmanager/index.html"},{"title":"TextSoap Cleaners","text":"If you process a lot of text, you know the value of programs that will make that job easier. I used to use Awk for those text cleanup jobs, but now I have found a better friend: Textsoap! Creating and sharing Textsoap cleaners is easy and fun. As I write new cleaners, I will add them to the list below. You can use them as they are or modify them as you need. It is really easy. I also have an Alfred workflow for working with TextSoap. Cleaners Name Description Fix Bible Text.tscleaner This cleaner takes text copied from a theWord bible program and formats it the way I like it. Make Title from URL.tscleaner This takes the slug out of an URL and creates a title from it. Name:Address converter.tscleaner This one takes a list of &lt;name&gt;:&lt;address&gt; and creates an unordered list of anchors. PostURL to Title.tscleaner Same as Make Title from URL.tscleaner except it assumes the slug is the text given. Remove Hyphens.tscleaner Remove all Hyphens and make them spaces. Remove dashes.tscleaner Remove all dashes and makes them spaces. Remove p tag.tscleaner Remove all html p tags for including into WordPress. list of addresses to unordered list anchors.tscleaner Takes a list of Urls and makes an unordered list of anchors for them. CleantoMinHTML This cleaner will take HTML, remove all styling tags, remove all paragraph tags, but leave list type tags and anchor tags. This cleaner is great for taking expressive HTML to the bare minimum for inclusion into a CMS. Textsoap ArticleI have also written an article on writing cleaners for Mac Tuts+. It is called: How to Effortlessly Create Markdown With TextSoap This is a complicated cleaner that takes markdown text, translates it to HTML, and fixes it up to work in a WordPress page post.","link":"/textsoap/index.html"},{"title":"WordPress Web API","text":"Web APIMany times when a site powered by WordPress wants to supply a Web API for their site, they will work outside of WordPress using either PHP or Ruby on Rails. Then they have to write their own functions to get to the information inside the database for their WordPress site. I always thought that was a little backwards. That is why I wrote the Web API plugin for WordPress. With the Web API plugin, you no longer have to do that. This plugin creates a custom post type called API. When you create an API post, all of the content will be executed as PHP code just before the theme stuff is executed in WordPress. Therefore, you have full access to all the WordPress PHP functions to create whatever you want: JSON output, HTML sniplets, full HTML pages without any of the sites theme or code, or anything else you can imagine. After the code on the page is executed, then the PHP session will be ended. Features Create any type of Web API functionality JSON output Special HTML web sniplets to be included in another website or JavaScript powered widget. Special web pages without any WordPress theming. Great for doing a special web application. Anything else you can dream up! Place any PHP you want into the special API post type and it will be executed. DownloadThis is avaiable on my GitHub accout. Check it out!","link":"/wpwebapi/index.html"},{"title":"Favorite Tools","text":"Favorite Software ToolsSince my site is about software tools for your computer, I thought I would share what tools I find useful and fun. Every tool on this page are tools that I use on a regular basis. Some are free, some are not. But, all of them are extremely useful tools. They are not listed in any particular order. I will be adding on to this list, so check by often! I hope you enjoy! By the way, what is your favorite tool? Let everyone know! macOSHere are some of my favorite tools on the Mac. I use these about everyday. fman Everyone needs a great file manager. Fman is the hackers best file manager. In the basic configuration, it is very much like Norton Commander was on Dos systems. But, fman is a full graphics based file manager that is extendable with python. I highly recommand it. fman is also multi-platform program. One license and you can run it on all your system. I currently use it on macOS, Peppermint Linux, and Windows. Not all extensions work on each OS, but many do. You can check my tutorial on writing custom extensions for fman on Tuts+. You can see a list of all my extensions here. Sublime Text 3 This is the best text editor by far! I use it for programming, markdown text creation for the web site, and any small text editing job. It is available on Windows, OSX, and Linux. It is a must have tool! Alfred 3 This great little program saves me many hours of time and keystrokes. It is a program launcher, file system explorer, hotkey runner, text expander, clipboard history manager, itunes controller, … There is no end to how you can use this program to help you use your computer. It is easily expanded using workflows. You can check out some of my workflows! MaxSnap Controling the large number of windows open can sometimes really be hard. I use MaxSnap to make it easier. My favorite feature is the moving and resizing windows with the mouse. Growly Notes This program comes the closest to giving the Mac community the flexibility and utility of Microsoft Office Onenote. I use it to store facts and to organism anything that I write. Being a free program, anyone can use it. But, if you find it useful, please give a donation for the continued development of the program. DEVONthink Pro I just recently started using this powerful program. It would best be called a thought management system for the Mac. It allows the tagging and linking of files or database entries in the program for intelligently managing them. It uses AppleScript for it’s scripting language and give very helpful tools to make the scripts accessable all the time. You can quickly jot notes and throw it into the inbox for filing latter. With the Alfred workflows for it, you can very quickly jot a note to be more fully developed later. It is also an excellent web site bookmarker/archiver. Searching all the content is quick and easy. Dropzone If you do not have Dropzone, I would recommend it. It has many pre-programmed destinations to process files and text. But, if you can not find what you need, you can easily write your own in Ruby! For a person that loves to program, this tool is very fun! Read my tutorial on [Writing Dropzone 3 Actions](http://computers.tutsplus.com/tutorials/writing-dropzone-3-actions--cms-21590) Keyboard Maestro This handy keyboard utility makes writing automation scripts on the Mac very easy. Also, you can expand your clipboards and do all kinds of things. Definitely give it a try! Typinator This great utility program helps speed up your workflow a whole lot. Many of the same things can be done with Alfred, but Alfred does not allow for inputing information in fields of the text clip. Therefore, this program is much more versatile. I actually make use of both for text expanding and love it. DwellClick This nifty little utility will click for you when you stop moving the cursor. It is very handy and help those with problem clicking the mouse a whole lot. RCDefaultApp This free utility for setting default programs to almost any protocal in the Mac OS. Camtasia This is a very good video editing software. I use it for saving frames for the video cover picture and to compress videos. This program works best with mov files. Screenflow This program is similar to Camtasia above, but works best at making mp4 files. Since my job has standardized mostly on mp4, this is my main video editing software. Transmit This is a great S3 upload, download client. CyberDuck This is the same as Transmit, but it is free and on Windows as well. MediaInfo This nice little program will give you all kinds of information about a video. This is very useful to check videos for possible encoder incompatibility. Gimp This is a great, free graphics editing program. I use it all the time to trim down screenshots to the proper size. Auphonics This great program is most useful for increasing the volume of a audio file. It also does a great job cleaning up many unwanted sounds. Audacity This is a great, free program for cleaning up audio files. It has many built-in filters for making the audio sound as good as possible. Name Mangler This is a must have program for renaming files. PopClip This utility program has saved me a lot of hand moving around time. It gives a very handy, programmable popup for copying the current selection (or a lot of other things). Grisbi This is an excellent, personal money management software for Windows, Mac OSx and Linux. ShortCat This utility makes almost everything on the screen keyboard accessable. You definitely need this in your toolbox. Microsoft WindowsHere are some of the tools I use on Windows. Many of the tools I use on macOS is also on Windows. Therefore, I will not repeat those. Microsoft Office This is still the best office suit. Word is a great document writer, Excel is the best overall spreadsheet program, and OneNote is one of the best ideal processors/note taking software around. theWord This is an excellent Bible study software, but it is only on Windows. It runs great in the Mac under Parrallels. Paired with theWord Modules Library, you have access to almost every bit of Christian literature that is in e-format. Phrase Express This great utility program helps speed up your workflow a whole lot. It is also compatable to Text Expander for the Mac. Ditto Ditto is a must have program on Windows. It allows you to manage and control your clipboard. I use it a whole lot! Linux ProgramsI would list the programs I use on Linux, but I would just be repeating myself! Everything has been covered above. There is really nothing that is Linux only that I use. Maybe someone can suggest some!","link":"/favtools/index.html"}],"posts":[{"title":"All Projects Moved","text":"Well, all the project pages have been moved over to this new site. Now, I need time to add to it as not all of my projects are currently listed. I’m not sure about moving over my tutorials as they were never overly popular. But, I most likely will move over the ones that I personally like. If there is one you would like to make sure is moved over, just let me know. I’ve also moved to the Icarus theme for Hexo. It is a very nice theme with many options. I’ll be customizing it more and more as I learn to use Hexo and the Icarus theme.","link":"/2018/11/15/AllProjectsMoved/"},{"title":"My New Helper-Station","text":"It is hard keeping up with all the tabs in Chrome or FireFox. On an average day, I’ll have anywhere from 10 to 30 tabs open at once. Not only is it hard to find the right tab, but my system starts to slow down and sputter with the high memory usage. Therefore, I open and close many tabs to a particular website over and over. But, I just recently found a new friend that helps with this problem. It’s called Station. This one application allows me to park all of my different web applications (25 normally) that I use daily in one convient place. Not only that, but I have some special pages for each one saved in a sub-list. Now, I use the browser for transitory pages that come and go throughout the day. By using Station, my CPU is breathing easier and I have more memory for other local applications. Overall, it is really speeding up my workflow. With the &lt;cmd&gt;-t hotkey, I can search the name of each page quickly and switch to it with ease. The top left corner has a quick switch for the last two pages I was on. I’m still exploring all the different features of Station. Go give it a try yourself. It’s free!","link":"/2018/12/01/My-New-Helper-Station/"},{"title":"Hello World","text":"I’m working at moving my site to GitHub pages using Hexo.","link":"/2018/11/08/hello-world/hello-world/"},{"title":"Moving Servers","text":"Since my site isn’t making money and the cost for the VPN increasing, I’ve decided to move the Custom Computer Tools to a GitHub Pages account. I’m now using hexo to create the static pages. I’m still working on the transition. Therefore, not all of my project pages are in place. But, I have the Alfred workflows moved over. After everything is here, I’ll work on new stuff as I have time.","link":"/2018/11/12/movingserver/index/"}],"tags":[{"name":"Custom Computer Tools","slug":"Custom-Computer-Tools","link":"/tags/Custom-Computer-Tools/"},{"name":"News","slug":"News","link":"/tags/News/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"Web Apps","slug":"Web-Apps","link":"/tags/Web-Apps/"},{"name":"Free","slug":"Free","link":"/tags/Free/"}],"categories":[]}